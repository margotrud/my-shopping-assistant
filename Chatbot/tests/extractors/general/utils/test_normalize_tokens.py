#Chatbot/tests/extractors/general/utils/test_normalize_tokens.py
import unittest
from Chatbot.extractors.general.utils.fuzzy_match import normalize_token  # Replace with actual path

class TestNormalizeToken(unittest.TestCase):
    def test_case_01(self): self.assertEqual(normalize_token("bold"), "bold")
    def test_case_02(self): self.assertEqual(normalize_token("Bold"), "bold")
    def test_case_03(self): self.assertEqual(normalize_token("  bold "), "bold")
    def test_case_04(self): self.assertEqual(normalize_token("boldness"), "bold")
    def test_case_05(self): self.assertEqual(normalize_token("softness"), "soft")
    def test_case_06(self): self.assertEqual(normalize_token("darkness"), "dark")
    def test_case_07(self): self.assertEqual(normalize_token("lightness"), "light")
    def test_case_08(self): self.assertEqual(normalize_token("brightness"), "bright")
    def test_case_09(self): self.assertEqual(normalize_token("coolness"), "cool")
    def test_case_10(self): self.assertEqual(normalize_token("kindness"), "kind")
    def test_case_11(self): self.assertEqual(normalize_token("running"), "run")
    def test_case_12(self): self.assertEqual(normalize_token("swimming"), "swim")
    def test_case_13(self): self.assertEqual(normalize_token("beautiful"), "beautiful")
    def test_case_14(self): self.assertEqual(normalize_token("prettier"), "pretty")
    def test_case_15(self): self.assertEqual(normalize_token("darker"), "dark")
    def test_case_16(self): self.assertEqual(normalize_token("happier"), "happy")
    def test_case_17(self): self.assertEqual(normalize_token("glossy"), "glossy")
    def test_case_18(self): self.assertEqual(normalize_token("natural"), "natural")
    def test_case_19(self): self.assertEqual(normalize_token("elegant"), "elegant")
    def test_case_20(self): self.assertEqual(normalize_token("classy"), "classy")
    def test_case_21(self): self.assertEqual(normalize_token("dramatic"), "dramatic")
    def test_case_22(self): self.assertEqual(normalize_token("glowy"), "glowy")
    def test_case_23(self): self.assertEqual(normalize_token("luminous"), "luminous")
    def test_case_24(self): self.assertEqual(normalize_token("icy"), "icy")
    def test_case_25(self): self.assertEqual(normalize_token("barely-there"), "barely")
    def test_case_26(self): self.assertEqual(normalize_token("skin-like"), "skin")
    def test_case_27(self): self.assertEqual(normalize_token("cool-toned"), "cool")
    def test_case_28(self): self.assertEqual(normalize_token("bare minimum"), "bare minimum")
    def test_case_29(self): self.assertEqual(normalize_token("glow up"), "glow up")
    def test_case_30(self): self.assertEqual(normalize_token("very soft"), "very soft")
    def test_case_31(self): self.assertEqual(normalize_token("dramatic look"), "dramatic look")
    def test_case_32(self): self.assertEqual(normalize_token("no makeup"), "no makeup")
    def test_case_33(self): self.assertEqual(normalize_token("bold lip"), "bold lip")
    def test_case_34(self): self.assertEqual(normalize_token("fresh skin"), "fresh skin")
    def test_case_35(self): self.assertEqual(normalize_token("subtle glow"), "subtle glow")
    def test_case_36(self): self.assertEqual(normalize_token("vibrant tone"), "vibrant tone")
    def test_case_37(self): self.assertEqual(normalize_token("classic vibe"), "classic vibe")
    def test_case_38(self): self.assertEqual(normalize_token("light makeup"), "light makeup")
    def test_case_39(self): self.assertEqual(normalize_token("shiny gloss"), "shiny gloss")
    def test_case_40(self): self.assertEqual(normalize_token("bare face"), "bare face")
    def test_case_41(self): self.assertEqual(normalize_token("clean look"), "clean look")
    def test_case_42(self): self.assertEqual(normalize_token("rosy cheeks"), "rosy cheeks")
    def test_case_43(self): self.assertEqual(normalize_token("pinky blush"), "pinky blush")
    def test_case_44(self): self.assertEqual(normalize_token("dark circles"), "dark circles")
    def test_case_45(self): self.assertEqual(normalize_token("glowup"), "glowup")
    def test_case_46(self): self.assertEqual(normalize_token("barelythere"), "barelythere")
    def test_case_47(self): self.assertEqual(normalize_token("bld"), "bld")
    def test_case_48(self): self.assertEqual(normalize_token("natrual"), "natrual")
    def test_case_49(self): self.assertEqual(normalize_token("shimmery"), "shimmery")
    def test_case_50(self): self.assertEqual(normalize_token("sparkly finish"), "sparkly finish")
